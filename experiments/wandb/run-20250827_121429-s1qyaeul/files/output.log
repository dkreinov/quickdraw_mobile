=== LAMB Sweep Run ===
LR: 0.000180
Weight Decay: 0.0385
Warmup Epochs: 2
Using device: cuda
Available GPUs: 4
⏱️  Creating train dataset...
Loading QuickDraw dataset from: ../data/quickdraw_parquet
Available classes: 344
Using 50 classes: ['aircraft carrier', 'arm', 'asparagus', 'backpack', 'banana', 'basketball', 'bottlecap', 'bread', 'broom', 'bulldozer']...
Using per-class Parquet format (recommended)...
  Loading 50 classes concurrently from per-class files...
    aircraft carrier: 1200 samples
    arm: 1200 samples
    asparagus: 1200 samples
    backpack: 1200 samples
    banana: 1200 samples
    basketball: 1200 samples
    bottlecap: 1200 samples
    bread: 1200 samples
    broom: 1200 samples
    bulldozer: 1200 samples
    butterfly: 1200 samples
    camel: 1200 samples
    canoe: 1200 samples
    chair: 1200 samples
    compass: 1200 samples
    cookie: 1200 samples
    drums: 1200 samples
    eyeglasses: 1200 samples
    face: 1200 samples
    fan: 1200 samples
    fence: 1200 samples
    fish: 1200 samples
    flying saucer: 1200 samples
    grapes: 1200 samples
    hand: 1200 samples
    hat: 1200 samples
    horse: 1200 samples
    light bulb: 1200 samples
    lighthouse: 1200 samples
    line: 1200 samples
    marker: 1200 samples
    mountain: 1200 samples
    mouse: 1200 samples
    parachute: 1200 samples
    passport: 1200 samples
    pliers: 1200 samples
    potato: 1200 samples
    sea turtle: 1200 samples
    snowflake: 1200 samples
    spider: 1200 samples
    square: 1200 samples
    steak: 1200 samples
    swing set: 1200 samples
    sword: 1200 samples
    television: 1200 samples
    tennis racquet: 1200 samples
    toothbrush: 1200 samples
    train: 1200 samples
    umbrella: 1200 samples
    washing machine: 1200 samples
  Per-class loading complete (concurrent): 60000 samples
Total samples: 60000
⏱️  Train dataset creation took: 0.47s
⏱️  Creating val dataset...
Loading QuickDraw dataset from: ../data/quickdraw_parquet
Available classes: 344
Using 50 classes: ['aircraft carrier', 'arm', 'asparagus', 'backpack', 'banana', 'basketball', 'bottlecap', 'bread', 'broom', 'bulldozer']...
Using per-class Parquet format (recommended)...
  Loading 50 classes concurrently from per-class files...
    aircraft carrier: 1200 samples
    arm: 1200 samples
    asparagus: 1200 samples
    backpack: 1200 samples
    banana: 1200 samples
    basketball: 1200 samples
    bottlecap: 1200 samples
    bread: 1200 samples
    broom: 1200 samples
    bulldozer: 1200 samples
    butterfly: 1200 samples
    camel: 1200 samples
    canoe: 1200 samples
    chair: 1200 samples
    compass: 1200 samples
    cookie: 1200 samples
    drums: 1200 samples
    eyeglasses: 1200 samples
    face: 1200 samples
    fan: 1200 samples
    fence: 1200 samples
    fish: 1200 samples
    flying saucer: 1200 samples
    grapes: 1200 samples
    hand: 1200 samples
    hat: 1200 samples
    horse: 1200 samples
    light bulb: 1200 samples
    lighthouse: 1200 samples
    line: 1200 samples
    marker: 1200 samples
    mountain: 1200 samples
    mouse: 1200 samples
    parachute: 1200 samples
    passport: 1200 samples
    pliers: 1200 samples
    potato: 1200 samples
    sea turtle: 1200 samples
    snowflake: 1200 samples
    spider: 1200 samples
    square: 1200 samples
    steak: 1200 samples
    swing set: 1200 samples
    sword: 1200 samples
    television: 1200 samples
    tennis racquet: 1200 samples
    toothbrush: 1200 samples
    train: 1200 samples
    umbrella: 1200 samples
    washing machine: 1200 samples
  Per-class loading complete (concurrent): 60000 samples
Total samples: 60000
⏱️  Val dataset creation took: 0.44s

Loading train/val split...
Using pre-computed split (fast loading)
⏱️  Split loading took: 0.01s
⏱️  Subset creation took: 0.00s
⏱️  DataLoader creation took: 0.00s
⏱️  TOTAL data loading time: 0.02s

Dataloaders created:
  Training: 48 batches (50000 samples)
  Validation: 10 batches (10000 samples)
Dataset: 50 classes, 48 train batches

Building model:
   Architecture: vit_tiny_patch16_224
   Input channels: 1 (grayscale)
   Output classes: 50
Creating vit_tiny_patch16_224 with 50 classes
   Single-channel input: 1 → 3 channel conversion
   Pretrained: False
   Drop path rate: 0.1
   Random initialization for single-channel weights

Model info:
   Total parameters: 5,435,762
   Trainable parameters: 5,435,762
   Model size: 20.74 MB
Using 4 GPUs with LAMB optimizer
Setting up deterministic training (seed=42)
Created lamb (fallback to AdamW) optimizer:
   Learning rate: 0.000180
   Weight decay: 0.03851920420053732
   Decay params: 52
   No-decay params: 100
Created learning rate scheduler (step-based):
   Warmup steps: 96
   Total steps: 1440
   Steps per epoch: 48
Created loss function:
   Type: CrossEntropyLoss
   Label smoothing: 0.12299776325005447
Created AMP gradient scaler
Trainer initialized:
  Model: lamb_lr_0.000180_wd_0.0385
  Train batches: 48
  Val batches: 10
  Save directory: experiments/wandb_lamb_runs
Starting LAMB training for 30 epochs...
/localdrive/users/dkreinov/quickdraw-mobilevit-quant/.venv/lib/python3.10/site-packages/torch/autograd/graph.py:829: UserWarning: Deterministic behavior was enabled with either `torch.use_deterministic_algorithms(True)` or `at::Context::setDeterministicAlgorithms(true)`, but this operation is not deterministic because it uses CuBLAS and you have CUDA >= 10.2. To enable deterministic behavior in this case, you must set an environment variable before running your PyTorch application: CUBLAS_WORKSPACE_CONFIG=:4096:8 or CUBLAS_WORKSPACE_CONFIG=:16:8. For more information, go to https://docs.nvidia.com/cuda/cublas/index.html#results-reproducibility (Triggered internally at /pytorch/aten/src/ATen/Context.cpp:233.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
/localdrive/users/dkreinov/quickdraw-mobilevit-quant/.venv/lib/python3.10/site-packages/torch/autograd/graph.py:829: UserWarning: Memory Efficient attention defaults to a non-deterministic algorithm. To explicitly enable determinism call torch.use_deterministic_algorithms(True, warn_only=False). (Triggered internally at /pytorch/aten/src/ATen/native/transformers/cuda/attention_backward.cu:775.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
  Batch    0/48 | Loss: 3.9580 | LR: 3.66e-06 | GradNorm: 1.509
  Batch    4/48 | Loss: 3.9374 | LR: 1.11e-05 | GradNorm: 0.995
  Batch    8/48 | Loss: 3.9223 | LR: 1.85e-05 | GradNorm: 0.776
  Batch   12/48 | Loss: 3.9132 | LR: 2.60e-05 | GradNorm: 0.740
  Batch   16/48 | Loss: 3.9204 | LR: 3.34e-05 | GradNorm: 0.682
  Batch   20/48 | Loss: 3.9162 | LR: 4.09e-05 | GradNorm: 0.704
  Batch   24/48 | Loss: 3.9163 | LR: 4.83e-05 | GradNorm: 0.716
  Batch   28/48 | Loss: 3.9177 | LR: 5.58e-05 | GradNorm: 0.642
  Batch   32/48 | Loss: 3.9094 | LR: 6.32e-05 | GradNorm: 0.491
  Batch   36/48 | Loss: 3.9132 | LR: 7.06e-05 | GradNorm: 0.541
  Batch   40/48 | Loss: 3.9114 | LR: 7.81e-05 | GradNorm: 0.555
  Batch   44/48 | Loss: 3.9062 | LR: 8.55e-05 | GradNorm: 0.598
Epoch 1/30: Train=2.24%, Val=2.00%, Best=2.00% (E1), Gap=0.24%, LR=9.11e-05
  Batch    0/48 | Loss: 3.9058 | LR: 9.30e-05 | GradNorm: 0.636
  Batch    4/48 | Loss: 3.8826 | LR: 1.00e-04 | GradNorm: 0.541
  Batch    8/48 | Loss: 3.8477 | LR: 1.08e-04 | GradNorm: 0.748
  Batch   12/48 | Loss: 3.8009 | LR: 1.15e-04 | GradNorm: 3.016
  Batch   16/48 | Loss: 3.9114 | LR: 1.23e-04 | GradNorm: 7.351
  Batch   20/48 | Loss: 3.9932 | LR: 1.30e-04 | GradNorm: 6.268
  Batch   24/48 | Loss: 3.8809 | LR: 1.38e-04 | GradNorm: 5.389
  Batch   28/48 | Loss: 3.8512 | LR: 1.45e-04 | GradNorm: 3.591
  Batch   32/48 | Loss: 3.8319 | LR: 1.52e-04 | GradNorm: 3.201
  Batch   36/48 | Loss: 3.8447 | LR: 1.60e-04 | GradNorm: 3.438
  Batch   40/48 | Loss: 3.7518 | LR: 1.67e-04 | GradNorm: 1.684
  Batch   44/48 | Loss: 3.7025 | LR: 1.75e-04 | GradNorm: 1.681
/localdrive/users/dkreinov/quickdraw-mobilevit-quant/.venv/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:209: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
Epoch 2/30: Train=4.85%, Val=6.11%, Best=6.11% (E2), Gap=-1.26%, LR=1.80e-04
  Batch    0/48 | Loss: 3.6805 | LR: 1.80e-04 | GradNorm: 5.310
  Batch    4/48 | Loss: 3.6826 | LR: 1.80e-04 | GradNorm: 5.882
  Batch    8/48 | Loss: 3.6294 | LR: 1.80e-04 | GradNorm: 2.743
  Batch   12/48 | Loss: 3.6315 | LR: 1.80e-04 | GradNorm: 3.733
  Batch   16/48 | Loss: 3.6412 | LR: 1.80e-04 | GradNorm: 6.105
  Batch   20/48 | Loss: 3.6031 | LR: 1.80e-04 | GradNorm: 3.768
  Batch   24/48 | Loss: 3.5999 | LR: 1.80e-04 | GradNorm: 3.944
  Batch   28/48 | Loss: 3.5299 | LR: 1.80e-04 | GradNorm: 0.846
  Batch   32/48 | Loss: 3.5888 | LR: 1.80e-04 | GradNorm: 4.161
  Batch   36/48 | Loss: 3.5737 | LR: 1.80e-04 | GradNorm: 2.382
  Batch   40/48 | Loss: 3.5125 | LR: 1.80e-04 | GradNorm: 2.359
  Batch   44/48 | Loss: 3.4759 | LR: 1.80e-04 | GradNorm: 2.346
Epoch 3/30: Train=9.60%, Val=9.07%, Best=9.07% (E3), Gap=0.53%, LR=1.80e-04
  Batch    0/48 | Loss: 3.4563 | LR: 1.80e-04 | GradNorm: 3.241
  Batch    4/48 | Loss: 3.4677 | LR: 1.80e-04 | GradNorm: 3.510
