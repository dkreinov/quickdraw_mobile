=== W&B Sweep Run: LR=0.005445 ===
Using device: cuda
⏱️  Creating train dataset...
Loading QuickDraw dataset from: ../data/quickdraw_parquet
Available classes: 344
Using 50 classes: ['aircraft carrier', 'arm', 'asparagus', 'backpack', 'banana', 'basketball', 'bottlecap', 'bread', 'broom', 'bulldozer']...
Using per-class Parquet format (recommended)...
  Loading 50 classes concurrently from per-class files...
    aircraft carrier: 1200 samples
    arm: 1200 samples
    asparagus: 1200 samples
    backpack: 1200 samples
    banana: 1200 samples
    basketball: 1200 samples
    bottlecap: 1200 samples
    bread: 1200 samples
    broom: 1200 samples
    bulldozer: 1200 samples
    butterfly: 1200 samples
    camel: 1200 samples
    canoe: 1200 samples
    chair: 1200 samples
    compass: 1200 samples
    cookie: 1200 samples
    drums: 1200 samples
    eyeglasses: 1200 samples
    face: 1200 samples
    fan: 1200 samples
    fence: 1200 samples
    fish: 1200 samples
    flying saucer: 1200 samples
    grapes: 1200 samples
    hand: 1200 samples
    hat: 1200 samples
    horse: 1200 samples
    light bulb: 1200 samples
    lighthouse: 1200 samples
    line: 1200 samples
    marker: 1200 samples
    mountain: 1200 samples
    mouse: 1200 samples
    parachute: 1200 samples
    passport: 1200 samples
    pliers: 1200 samples
    potato: 1200 samples
    sea turtle: 1200 samples
    snowflake: 1200 samples
    spider: 1200 samples
    square: 1200 samples
    steak: 1200 samples
    swing set: 1200 samples
    sword: 1200 samples
    television: 1200 samples
    tennis racquet: 1200 samples
    toothbrush: 1200 samples
    train: 1200 samples
    umbrella: 1200 samples
    washing machine: 1200 samples
  Per-class loading complete (concurrent): 60000 samples
Total samples: 60000
⏱️  Train dataset creation took: 0.47s
⏱️  Creating val dataset...
Loading QuickDraw dataset from: ../data/quickdraw_parquet
Available classes: 344
Using 50 classes: ['aircraft carrier', 'arm', 'asparagus', 'backpack', 'banana', 'basketball', 'bottlecap', 'bread', 'broom', 'bulldozer']...
Using per-class Parquet format (recommended)...
  Loading 50 classes concurrently from per-class files...
    aircraft carrier: 1200 samples
    arm: 1200 samples
    asparagus: 1200 samples
    backpack: 1200 samples
    banana: 1200 samples
    basketball: 1200 samples
    bottlecap: 1200 samples
    bread: 1200 samples
    broom: 1200 samples
    bulldozer: 1200 samples
    butterfly: 1200 samples
    camel: 1200 samples
    canoe: 1200 samples
    chair: 1200 samples
    compass: 1200 samples
    cookie: 1200 samples
    drums: 1200 samples
    eyeglasses: 1200 samples
    face: 1200 samples
    fan: 1200 samples
    fence: 1200 samples
    fish: 1200 samples
    flying saucer: 1200 samples
    grapes: 1200 samples
    hand: 1200 samples
    hat: 1200 samples
    horse: 1200 samples
    light bulb: 1200 samples
    lighthouse: 1200 samples
    line: 1200 samples
    marker: 1200 samples
    mountain: 1200 samples
    mouse: 1200 samples
    parachute: 1200 samples
    passport: 1200 samples
    pliers: 1200 samples
    potato: 1200 samples
    sea turtle: 1200 samples
    snowflake: 1200 samples
    spider: 1200 samples
    square: 1200 samples
    steak: 1200 samples
    swing set: 1200 samples
    sword: 1200 samples
    television: 1200 samples
    tennis racquet: 1200 samples
    toothbrush: 1200 samples
    train: 1200 samples
    umbrella: 1200 samples
    washing machine: 1200 samples
  Per-class loading complete (concurrent): 60000 samples
Total samples: 60000
⏱️  Val dataset creation took: 0.43s

Loading train/val split...
Using pre-computed split (fast loading)
⏱️  Split loading took: 0.01s
⏱️  Subset creation took: 0.00s
⏱️  DataLoader creation took: 0.00s
⏱️  TOTAL data loading time: 0.02s

Dataloaders created:
  Training: 48 batches (50000 samples)
  Validation: 10 batches (10000 samples)
Dataset: 50 classes, 48 train batches

Building model:
   Architecture: vit_tiny_patch16_224
   Input channels: 1 (grayscale)
   Output classes: 50
Creating vit_tiny_patch16_224 with 50 classes
   Single-channel input: 1 → 3 channel conversion
   Pretrained: False
   Drop path rate: 0.1
   Random initialization for single-channel weights

Model info:
   Total parameters: 5,435,762
   Trainable parameters: 5,435,762
   Model size: 20.74 MB
Using 4 GPUs
Setting up deterministic training (seed=42)
Created AdamW optimizer:
   Learning rate: 0.005444789218257867
   Weight decay: 0.05
   Decay params: 52
   No-decay params: 100
Created learning rate scheduler (step-based):
   Warmup steps: 96
   Total steps: 480
   Steps per epoch: 48
Created loss function:
   Type: CrossEntropyLoss
   Label smoothing: 0.1
Created AMP gradient scaler
Trainer initialized:
  Model: wandb_lr_0.005445
  Train batches: 48
  Val batches: 10
  Save directory: experiments/wandb_runs
Starting training for 10 epochs...
/localdrive/users/dkreinov/quickdraw-mobilevit-quant/.venv/lib/python3.10/site-packages/torch/autograd/graph.py:829: UserWarning: Deterministic behavior was enabled with either `torch.use_deterministic_algorithms(True)` or `at::Context::setDeterministicAlgorithms(true)`, but this operation is not deterministic because it uses CuBLAS and you have CUDA >= 10.2. To enable deterministic behavior in this case, you must set an environment variable before running your PyTorch application: CUBLAS_WORKSPACE_CONFIG=:4096:8 or CUBLAS_WORKSPACE_CONFIG=:16:8. For more information, go to https://docs.nvidia.com/cuda/cublas/index.html#results-reproducibility (Triggered internally at /pytorch/aten/src/ATen/Context.cpp:233.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
/localdrive/users/dkreinov/quickdraw-mobilevit-quant/.venv/lib/python3.10/site-packages/torch/autograd/graph.py:829: UserWarning: Memory Efficient attention defaults to a non-deterministic algorithm. To explicitly enable determinism call torch.use_deterministic_algorithms(True, warn_only=False). (Triggered internally at /pytorch/aten/src/ATen/native/transformers/cuda/attention_backward.cu:775.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
  Batch    0/48 | Loss: 3.9534 | LR: 1.11e-04 | GradNorm: 1.542
  Batch    4/48 | Loss: 3.9303 | LR: 3.35e-04 | GradNorm: 0.638
  Batch    8/48 | Loss: 3.9238 | LR: 5.60e-04 | GradNorm: 0.480
  Batch   12/48 | Loss: 3.9185 | LR: 7.84e-04 | GradNorm: 0.465
  Batch   16/48 | Loss: 3.9233 | LR: 1.01e-03 | GradNorm: 0.473
  Batch   20/48 | Loss: 3.9246 | LR: 1.23e-03 | GradNorm: 0.572
  Batch   24/48 | Loss: 3.9030 | LR: 1.46e-03 | GradNorm: 0.581
  Batch   28/48 | Loss: 3.8394 | LR: 1.68e-03 | GradNorm: 1.678
  Batch   32/48 | Loss: 4.0177 | LR: 1.91e-03 | GradNorm: 0.894
  Batch   36/48 | Loss: 3.9519 | LR: 2.13e-03 | GradNorm: 0.650
  Batch   40/48 | Loss: 3.9565 | LR: 2.36e-03 | GradNorm: 0.723
  Batch   44/48 | Loss: 3.9081 | LR: 2.58e-03 | GradNorm: 0.496
Epoch 1/10: Train=2.24%, Val=2.54%, Gap=-0.30%, LR=2.75e-03
  Batch    0/48 | Loss: 3.9012 | LR: 2.81e-03 | GradNorm: 0.581
  Batch    4/48 | Loss: 3.8710 | LR: 3.03e-03 | GradNorm: 0.478
  Batch    8/48 | Loss: 3.8847 | LR: 3.25e-03 | GradNorm: 0.638
  Batch   12/48 | Loss: 3.8549 | LR: 3.48e-03 | GradNorm: 0.582
  Batch   16/48 | Loss: 3.8635 | LR: 3.70e-03 | GradNorm: 1.187
  Batch   20/48 | Loss: 3.9081 | LR: 3.93e-03 | GradNorm: 0.556
  Batch   24/48 | Loss: 3.8562 | LR: 4.15e-03 | GradNorm: 0.471
  Batch   28/48 | Loss: 3.9166 | LR: 4.38e-03 | GradNorm: 0.646
  Batch   32/48 | Loss: 3.8970 | LR: 4.60e-03 | GradNorm: 0.552
  Batch   36/48 | Loss: 3.8658 | LR: 4.83e-03 | GradNorm: 0.529
  Batch   40/48 | Loss: 3.8568 | LR: 5.05e-03 | GradNorm: 0.649
  Batch   44/48 | Loss: 3.8363 | LR: 5.28e-03 | GradNorm: 0.573
/localdrive/users/dkreinov/quickdraw-mobilevit-quant/.venv/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:209: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
Epoch 2/10: Train=3.05%, Val=2.93%, Gap=0.12%, LR=5.44e-03
  Batch    0/48 | Loss: 3.8857 | LR: 5.44e-03 | GradNorm: 0.533
  Batch    4/48 | Loss: 3.8967 | LR: 5.44e-03 | GradNorm: 0.370
  Batch    8/48 | Loss: 3.8976 | LR: 5.44e-03 | GradNorm: 0.443
  Batch   12/48 | Loss: 3.9052 | LR: 5.43e-03 | GradNorm: 0.410
  Batch   16/48 | Loss: 3.9002 | LR: 5.42e-03 | GradNorm: 0.432
  Batch   20/48 | Loss: 3.9066 | LR: 5.40e-03 | GradNorm: 0.469
  Batch   24/48 | Loss: 3.8989 | LR: 5.39e-03 | GradNorm: 0.349
  Batch   28/48 | Loss: 3.8806 | LR: 5.37e-03 | GradNorm: 0.393
  Batch   32/48 | Loss: 3.8666 | LR: 5.35e-03 | GradNorm: 0.385
  Batch   36/48 | Loss: 3.8948 | LR: 5.32e-03 | GradNorm: 1.403
  Batch   40/48 | Loss: 3.8858 | LR: 5.29e-03 | GradNorm: 0.402
  Batch   44/48 | Loss: 3.8438 | LR: 5.26e-03 | GradNorm: 0.430
Epoch 3/10: Train=2.68%, Val=3.94%, Gap=-1.26%, LR=5.24e-03
  Batch    0/48 | Loss: 3.8248 | LR: 5.23e-03 | GradNorm: 0.318
  Batch    4/48 | Loss: 3.8075 | LR: 5.19e-03 | GradNorm: 0.362
  Batch    8/48 | Loss: 3.8758 | LR: 5.15e-03 | GradNorm: 0.588
  Batch   12/48 | Loss: 3.8333 | LR: 5.11e-03 | GradNorm: 0.343
  Batch   16/48 | Loss: 3.8209 | LR: 5.07e-03 | GradNorm: 0.521
  Batch   20/48 | Loss: 3.8263 | LR: 5.02e-03 | GradNorm: 0.343
  Batch   24/48 | Loss: 3.8170 | LR: 4.97e-03 | GradNorm: 0.626
  Batch   28/48 | Loss: 3.8113 | LR: 4.92e-03 | GradNorm: 0.489
  Batch   32/48 | Loss: 3.8026 | LR: 4.87e-03 | GradNorm: 0.332
  Batch   36/48 | Loss: 3.8015 | LR: 4.81e-03 | GradNorm: 0.338
  Batch   40/48 | Loss: 3.8168 | LR: 4.75e-03 | GradNorm: 0.285
  Batch   44/48 | Loss: 3.8054 | LR: 4.69e-03 | GradNorm: 0.334
Epoch 4/10: Train=3.95%, Val=3.16%, Gap=0.79%, LR=4.65e-03
  Batch    0/48 | Loss: 3.8084 | LR: 4.63e-03 | GradNorm: 0.517
  Batch    4/48 | Loss: 3.7752 | LR: 4.57e-03 | GradNorm: 0.389
  Batch    8/48 | Loss: 3.7901 | LR: 4.50e-03 | GradNorm: 0.348
  Batch   12/48 | Loss: 3.7908 | LR: 4.43e-03 | GradNorm: 0.508
  Batch   16/48 | Loss: 3.7817 | LR: 4.36e-03 | GradNorm: 0.461
  Batch   20/48 | Loss: 3.7775 | LR: 4.29e-03 | GradNorm: 0.381
  Batch   24/48 | Loss: 3.7770 | LR: 4.22e-03 | GradNorm: 0.442
  Batch   28/48 | Loss: 3.8141 | LR: 4.14e-03 | GradNorm: 0.389
  Batch   32/48 | Loss: 3.7736 | LR: 4.06e-03 | GradNorm: 0.253
  Batch   36/48 | Loss: 3.7938 | LR: 3.99e-03 | GradNorm: 0.275
  Batch   40/48 | Loss: 3.7781 | LR: 3.91e-03 | GradNorm: 0.172
  Batch   44/48 | Loss: 3.7952 | LR: 3.83e-03 | GradNorm: 0.381
Epoch 5/10: Train=4.52%, Val=3.63%, Gap=0.89%, LR=3.76e-03
  Batch    0/48 | Loss: 3.7884 | LR: 3.74e-03 | GradNorm: 0.403
  Batch    4/48 | Loss: 3.7550 | LR: 3.66e-03 | GradNorm: 0.220
  Batch    8/48 | Loss: 3.7466 | LR: 3.58e-03 | GradNorm: 0.272
  Batch   12/48 | Loss: 3.7944 | LR: 3.49e-03 | GradNorm: 0.455
  Batch   16/48 | Loss: 3.7652 | LR: 3.41e-03 | GradNorm: 0.275
